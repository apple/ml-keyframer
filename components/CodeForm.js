/*  For licensing see accompanying LICENSE file.
    Copyright (C) 2024 Apple Inc. All Rights Reserved.
*/

import React, { useEffect, useState } from 'react';
import { less } from '@codemirror/lang-less';
import CodeMirror from '@uiw/react-codemirror';
import { tokyoNight } from '@uiw/codemirror-theme-tokyo-night';

export default function CodeForm() {
    let sunsetExample = `<svg width="250px" height="250px" viewBox="0 0 129 105" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlnsXlink="http://www.w3.org/1999/xlink">
    <g id="window" fill-rule="nonzero">
        <polygon id="sky" fill="#45C1F7" points="0 105 129 105 129 0 0 0"></polygon>
        <circle id="sun" fill="#E8DE1B" stroke="#000000" stroke-width="4" r="16">
            <animate attributeName="cx" from="25.8486328" to="100" dur="3s" repeatCount="indefinite"/>
            <animate attributeName="cy" from="29.6357422" to="80" dur="3s" repeatCount="indefinite"/>
        </circle>
        <path id="grass" fill="#05D458" d="M2.31641422,65.4851887 C35.1653807,69.774932 58.3165191,69.3101008 71.7698293,64.0906952 C102.039778,52.3470329 95.0501782,53.784081 103.462115,51.420755 C109.070073,49.8452044 116.582701,48.7996793 126,48.2841797 C125.809243,63.4620287 125.808822,81.2508192 125.998738,101.650551 C78.8153856,102.058627 37.5879442,102.109299 2.31641422,101.802567 L2.31641422,65.4851887 Z"></path>
        <path id="grass-divider" fill="#000000" d="M1.72875089,66.9604594 L2.27124911,64.0099179 C29.8291998,69.0768314 48.9672949,69.7365235 59.5479809,66.0685547 C63.5490813,64.6815074 81.6540209,57.5743514 81.3049756,57.7076999 C89.1190657,54.7224221 95.5758695,52.494906 101.794737,50.7349126 C110.906565,48.1561863 118.912045,46.7841797 126,46.7841797 L126,49.7841797 C119.226429,49.7841797 111.479436,51.1118858 102.611677,53.6215384 C96.4923836,55.3533515 90.1135027,57.5539852 82.3756175,60.5101499 C82.7812264,60.355192 64.5989566,67.4927042 60.5306099,68.9030635 C49.3199879,72.7894101 29.7652194,72.1153552 1.72875089,66.9604594 Z"></path>
        <path id="cloud-1" fill="#FFFFFF" stroke="#000000" stroke-width="4" d="M45.3348254,47.5704551 C43.9993547,50.6825277 40.8689424,52.8666205 37.2201169,52.8666205 C36.0942738,52.8666205 35.017785,52.6586888 34.0281483,52.2797234 C32.8967722,53.2670781 31.4079181,53.8666205 29.7767575,53.8666205 C26.2366977,53.8666205 23.3669121,51.042731 23.3669121,47.5592868 C23.3669121,44.362029 25.7845266,41.7204047 28.9190364,41.3079336 C29.4206293,39.9153121 30.2738944,38.6864115 31.3737706,37.7246127 C31.0662734,36.8112197 30.8994141,35.8316421 30.8994141,34.8125 C30.8994141,29.8419373 34.8685147,25.8125 39.7646484,25.8125 C43.4425588,25.8125 46.5973616,28.0862365 47.9395833,31.3246338 C48.8172067,31.0552858 49.7505289,30.9101562 50.7182989,30.9101562 C55.8661431,30.9101562 60.0392954,35.0165679 60.0392954,40.0820833 C60.0392954,45.1475988 55.8661431,49.2540104 50.7182989,49.2540104 C48.7128485,49.2540104 46.8553227,48.6307987 45.3348254,47.5704551 Z"></path>
        <path id="cloud-2" fill="#FFFFFF" stroke="#000000" stroke-width="4" d="M106.554267,18.9330178 C106.561107,18.9330067 106.567948,18.9330011 106.57479,18.9330011 C113.315872,18.9330011 118.780598,24.3103309 118.780598,30.9436034 C118.780598,37.5768759 113.315872,42.9542057 106.57479,42.9542057 C103.736067,42.9542057 101.123683,42.0006337 99.050407,40.4012578 C97.497386,41.7531025 95.455645,42.5736517 93.21914,42.5736517 C88.3565,42.5736517 84.4145508,38.6947458 84.4145508,33.9098727 C84.4145508,32.7888762 84.6309116,31.7176053 85.024784,30.7342885 C83.6643533,29.5776974 82.8034355,27.8676186 82.8034355,25.9596774 C82.8034355,22.4762332 85.673221,19.6523438 89.213281,19.6523438 C89.670308,19.6523438 90.116163,19.69941 90.546114,19.7888854 C91.871499,16.5129316 95.045383,14.2060547 98.75,14.2060547 C102.122846,14.2060547 105.055763,16.1182434 106.554267,18.9330178 Z"></path>
        <path id="cloud-3" fill="#FFFFFF" stroke="#000000" stroke-width="4" transform="translate(64.484298, 18.088670) rotate(-27.000000) translate(-64.484298, -18.088670)" d="M67.3606089,12.5137206 C71.0065614,12.5895454 73.9384448,15.5215417 73.9384448,19.1273645 C73.9384448,22.7808102 70.928606,25.7425131 67.2157816,25.7425131 C64.6428183,25.7425131 62.4074568,24.3201847 61.2774254,22.2309781 C60.8404163,22.3576602 60.3778461,22.4256388 59.8991407,22.4256388 C57.2100723,22.4256388 55.0301517,20.2805813 55.0301517,17.6345188 C55.0301517,14.9884563 57.2100723,12.8433988 59.8991407,12.8433988 C60.2392876,12.8433988 60.5712879,12.8777205 60.8917602,12.9430364 C61.3155392,11.4927369 62.63826,10.4348276 64.2043688,10.4348276 C65.6113173,10.4348276 66.8218341,11.2886372 67.3606089,12.5137206 Z"></path>
        <path d="M4,101 L125,101 L125,4 L4,4 L4,101 Z M0,105 L0,0 L129,0 L129,105 L0,105 Z" id="border" fill="#000000"></path>
    </g>
</svg>`;

    const [outputCode, setOutputCode] = useState(sunsetExample); // default to response from ChatGPT

    const onSVGOutputChange = React.useCallback((value, viewUpdate) => {
        setOutputCode(value);
    }, []);


    return (
        <>
            <div dangerouslySetInnerHTML={{ __html: outputCode }} />
            <CodeMirror
                value={sunsetExample}
                extensions={[less()]}
                theme={tokyoNight}
                height="450px"
                width="850px"
                onChange={onSVGOutputChange}
            />
        </>
    )
}